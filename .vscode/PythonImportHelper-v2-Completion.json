[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "google.generativeai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.generativeai",
        "description": "google.generativeai",
        "detail": "google.generativeai",
        "documentation": {}
    },
    {
        "label": "fitz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fitz",
        "description": "fitz",
        "detail": "fitz",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "GoogleGenerativeAIEmbeddings",
        "importPath": "langchain_google_genai",
        "description": "langchain_google_genai",
        "isExtraImport": true,
        "detail": "langchain_google_genai",
        "documentation": {}
    },
    {
        "label": "ChatGoogleGenerativeAI",
        "importPath": "langchain_google_genai",
        "description": "langchain_google_genai",
        "isExtraImport": true,
        "detail": "langchain_google_genai",
        "documentation": {}
    },
    {
        "label": "FAISS",
        "importPath": "langchain_community.vectorstores",
        "description": "langchain_community.vectorstores",
        "isExtraImport": true,
        "detail": "langchain_community.vectorstores",
        "documentation": {}
    },
    {
        "label": "RecursiveCharacterTextSplitter",
        "importPath": "langchain.text_splitter",
        "description": "langchain.text_splitter",
        "isExtraImport": true,
        "detail": "langchain.text_splitter",
        "documentation": {}
    },
    {
        "label": "load_qa_chain",
        "importPath": "langchain.chains.question_answering",
        "description": "langchain.chains.question_answering",
        "isExtraImport": true,
        "detail": "langchain.chains.question_answering",
        "documentation": {}
    },
    {
        "label": "PromptTemplate",
        "importPath": "langchain.prompts",
        "description": "langchain.prompts",
        "isExtraImport": true,
        "detail": "langchain.prompts",
        "documentation": {}
    },
    {
        "label": "MY_KEY",
        "importPath": "env",
        "description": "env",
        "isExtraImport": true,
        "detail": "env",
        "documentation": {}
    },
    {
        "label": "Question",
        "kind": 6,
        "importPath": "google.gemini.src.app",
        "description": "google.gemini.src.app",
        "peekOfCode": "class Question(BaseModel):\n    doc_id: str\n    question: str\n# --- Funções Auxiliares ---\ndef get_pdf_text(file: UploadFile) -> str:\n    \"\"\"Extrai texto de um arquivo PDF usando PyMuPDF.\"\"\"\n    try:\n        doc = fitz.open(stream=file.file.read(), filetype=\"pdf\")\n        text = \"\"\n        for page in doc:",
        "detail": "google.gemini.src.app",
        "documentation": {}
    },
    {
        "label": "get_pdf_text",
        "kind": 2,
        "importPath": "google.gemini.src.app",
        "description": "google.gemini.src.app",
        "peekOfCode": "def get_pdf_text(file: UploadFile) -> str:\n    \"\"\"Extrai texto de um arquivo PDF usando PyMuPDF.\"\"\"\n    try:\n        doc = fitz.open(stream=file.file.read(), filetype=\"pdf\")\n        text = \"\"\n        for page in doc:\n            text += page.get_text()\n        return text\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Erro ao processar o PDF: {e}\")",
        "detail": "google.gemini.src.app",
        "documentation": {}
    },
    {
        "label": "get_text_chunks",
        "kind": 2,
        "importPath": "google.gemini.src.app",
        "description": "google.gemini.src.app",
        "peekOfCode": "def get_text_chunks(text: str) -> list:\n    \"\"\"Divide o texto em chunks menores para embeddings.\"\"\"\n    text_splitter = RecursiveCharacterTextSplitter(\n        chunk_size=1000,\n        chunk_overlap=200,\n        length_function=len\n    )\n    chunks = text_splitter.split_text(text)\n    return chunks\ndef get_vector_store(text_chunks: list):",
        "detail": "google.gemini.src.app",
        "documentation": {}
    },
    {
        "label": "get_vector_store",
        "kind": 2,
        "importPath": "google.gemini.src.app",
        "description": "google.gemini.src.app",
        "peekOfCode": "def get_vector_store(text_chunks: list):\n    \"\"\"Cria embeddings e um vetor FAISS a partir dos chunks de texto.\"\"\"\n    embeddings = GoogleGenerativeAIEmbeddings(model=\"models/embedding-001\")\n    vector_store = FAISS.from_texts(text_chunks, embedding=embeddings)\n    return vector_store\n# --- Endpoints da API ---\n@app.post(\"/upload-pdf/\")\nasync def upload_pdf(file: UploadFile = File(...)):\n    \"\"\"\n    Endpoint para fazer o upload de um PDF e processá-lo para ser usado na conversa.",
        "detail": "google.gemini.src.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "google.gemini.src.app",
        "description": "google.gemini.src.app",
        "peekOfCode": "app = FastAPI(title=\"PDF Chat com RAG e FastAPI\")\n# Dicionário para armazenar o vector_store FAISS em memória por sessão\nvector_store_sessions = {}\n# --- Modelos Pydantic ---\nclass Question(BaseModel):\n    doc_id: str\n    question: str\n# --- Funções Auxiliares ---\ndef get_pdf_text(file: UploadFile) -> str:\n    \"\"\"Extrai texto de um arquivo PDF usando PyMuPDF.\"\"\"",
        "detail": "google.gemini.src.app",
        "documentation": {}
    },
    {
        "label": "vector_store_sessions",
        "kind": 5,
        "importPath": "google.gemini.src.app",
        "description": "google.gemini.src.app",
        "peekOfCode": "vector_store_sessions = {}\n# --- Modelos Pydantic ---\nclass Question(BaseModel):\n    doc_id: str\n    question: str\n# --- Funções Auxiliares ---\ndef get_pdf_text(file: UploadFile) -> str:\n    \"\"\"Extrai texto de um arquivo PDF usando PyMuPDF.\"\"\"\n    try:\n        doc = fitz.open(stream=file.file.read(), filetype=\"pdf\")",
        "detail": "google.gemini.src.app",
        "documentation": {}
    }
]